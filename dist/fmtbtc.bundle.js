(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.fmtbtc = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var moveDec = require('move-decimal-point'),
    commas = function commas(s) {
    return s.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

var units = { msat: 1, sat: 4, bit: 6, milli: 9, btc: 12 },
    names = Object.keys(units);

var fmt = function fmt(n, from, to) {
    return moveDec(n, units[from] - units[to]);
},
    pfmt = function pfmt(n, f, t) {
    return fmt(n, f, t).split('.').map(function (s, i) {
        return i == 0 ? commas(s) : s;
    }).join('.');
};

module.exports = exports = function exports(n, pretty) {
    return (pretty ? pfmt : fmt)(n, 'sat', 'btc');
};

exports.fmt = fmt;
exports.pfmt = pfmt;
exports.units = units;

names.forEach(function (from) {
    return names.filter(function (to) {
        return to != from;
    }).forEach(function (to) {
        return exports[from + '2' + to] = function (n, pretty) {
            return (pretty ? pfmt : fmt)(n, from, to);
        };
    });
});

},{"move-decimal-point":2}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.12.7
(function() {
  var zeros;

  module.exports = function(num, n) {
    var frac, int, neg, ref;
    if (n === 0) {
      return num;
    }
    ref = ('' + num).split('.'), int = ref[0], frac = ref[1];
    int || (int = '0');
    frac || (frac = '0');
    neg = (int[0] === '-' ? '-' : '');
    if (neg) {
      int = int.slice(1);
    }
    if (n > 0) {
      if (n > frac.length) {
        frac += zeros(n - frac.length);
      }
      int += frac.slice(0, n);
      frac = frac.slice(n);
    } else {
      n = n * -1;
      if (n > int.length) {
        int = (zeros(n - int.length)) + int;
      }
      frac = int.slice(n * -1) + frac;
      int = int.slice(0, n * -1);
    }
    while (int[0] === '0') {
      int = int.slice(1);
    }
    while (frac[frac.length - 1] === '0') {
      frac = frac.slice(0, -1);
    }
    return neg + (int || '0') + (frac.length ? '.' + frac : '');
  };

  zeros = function(n) {
    return new Array(n + 1).join('0');
  };

}).call(this);

},{}]},{},[1])(1)
});
